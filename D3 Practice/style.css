@import url("https://fonts.googleapis.com/css?family=IBM+Plex+Sans:300,700&display=swap");

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  font-family: "IBM Plex Sans", sans-serif;
  min-height: 100vh;
  background: #f8f8f8;
}

/* center the container horizontally, capping its width at an arbitrary amount */
div.app {
  max-width: 700px;
  width: 90vw;
  margin: 1rem auto;
}
div.app h1 {
  font-weight: 700;
  text-align: center;
  margin-bottom: 1rem;
}

div.app a {
  color: inherit;
}

/* display the legend's items in a grid */
.viz--geo div.legend {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  grid-gap: 1.25rem;
  justify-content: center;
  font-size: 0.8rem;
  margin-top: 2rem;
  padding: 1rem;
  background: #fff;
  border: 1px solid #f0f0f0;
}
.viz--geo div.legend div.item {
  display: flex;
  align-items: center;
}
/* show the background color of the span through circles */
.viz--geo div.legend div.item span {
  margin-right: 0.5rem;
  width: 0.4rem;
  height: 0.4rem;
  border-radius: 50%;
}
@media (min-width: 700px) {
  .viz--geo svg {
    margin: 0 -4rem;
  }
}
.viz--geo svg .semitransparent {
  opacity: 0.4;
}
.viz--geo svg text {
  text-transform: capitalize;
}

/* display the card describing the nations in a grid */
.viz--tetris {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  grid-gap: 1rem;
  margin-top: 2rem;
}
/* on hover have each nation highlighted through a small change in background/shadow */
.viz--tetris div.nation {
  padding: 0.75rem 1.25rem;
  transition: all 0.2s ease-out;
}
.viz--tetris div.nation:hover {
  background: #fff;
  box-shadow: 0 0 5px -3px hsla(0, 0%, 0%, 0.2);
}
.viz--tetris div.nation h3 {
  text-transform: capitalize;
  font-size: 1.5rem;
  line-height: 2;
}

/* display the columns describing the different parties side by side */
.viz--tetris div.nation .seats {
  display: flex;
  margin: 2rem 0;
}
/* display the seats for each party in columns
columns with 10 rows, with excess items creating new columns
// ! since there is no reverse, and the items are squares, a fix is simply rotating the 10 rowed column on its head
*/
.viz--tetris div.nation .party {
  display: grid;
  grid-gap: 0.1rem;
  grid-template-rows: repeat(10, 10px);
  grid-auto-flow: column;
  transform: scaleY(-1);
  margin: 0 0.1rem;
  /* position relative for the pseudo element */
  position: relative;
}
/* add the data-seat attribute (expressing the number of seats) at the bottom of each grid
! since the grid is flipped, the positioning occurs from the bottom
 */
.viz--tetris div.nation .party:before {
  content: attr(data-seat);
  position: absolute;
  transform: scaleY(-1) translate(-50%, 0);
  bottom: 100%;
  left: 50%;
  font-size: 0.7rem;
  text-align: center;
}
/* size the divs as 10x10 squares */
.viz--tetris div.nation .seat {
  width: 10px;
  height: 10px;
}
